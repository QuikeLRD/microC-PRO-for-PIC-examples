;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 31/07/2023 03:57:41 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF4C  	GOTO        152
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x001C	0x0E07      	MOVLW       7
0x001E	0x6E0D      	MOVWF       R13, 0
L_Delay_22us1:
0x0020	0x2E0D      	DECFSZ      R13, 1, 0
0x0022	0xD7FE      	BRA         L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0024	0x0012      	RETURN      0
; end of _Delay_22us
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0026	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0028	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x002C	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x002E	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0030	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0032	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0034	0x0012      	RETURN      0
; end of ___CC2DW
_ADC_Read:
;__Lib_ADC_A_D.c,51 :: 		
;__Lib_ADC_A_D.c,54 :: 		
0x0036	0x6AC2      	CLRF        ADCON0 
;__Lib_ADC_A_D.c,55 :: 		
0x0038	0x1C15      	COMF        _vref_mask, 0 
0x003A	0x6E00      	MOVWF       R0 
0x003C	0x5000      	MOVF        R0, 0 
0x003E	0x16C1      	ANDWF       ADCON1, 1 
;__Lib_ADC_A_D.c,56 :: 		
0x0040	0x0E07      	MOVLW       7
0x0042	0x12C0      	IORWF       ADCON2, 1 
;__Lib_ADC_A_D.c,57 :: 		
0x0044	0x8EC0      	BSF         ADCON2, 7 
;__Lib_ADC_A_D.c,58 :: 		
0x0046	0xF000C022  	MOVFF       FARG_ADC_Read_channel, R0
0x004A	0x3600      	RLCF        R0, 1 
0x004C	0x9000      	BCF         R0, 0 
0x004E	0x3600      	RLCF        R0, 1 
0x0050	0x9000      	BCF         R0, 0 
0x0052	0x5000      	MOVF        R0, 0 
0x0054	0x12C2      	IORWF       ADCON0, 1 
;__Lib_ADC_A_D.c,59 :: 		
0x0056	0x80C2      	BSF         ADCON0, 0 
;__Lib_ADC_A_D.c,60 :: 		
0x0058	0xDFE1      	RCALL       _Delay_22us
;__Lib_ADC_A_D.c,61 :: 		
0x005A	0x82C2      	BSF         ADCON0, 1 
;__Lib_ADC_A_D.c,62 :: 		
L_ADC_Read2:
0x005C	0xA2C2      	BTFSS       ADCON0, 1 
0x005E	0xD001      	BRA         L_ADC_Read3
;__Lib_ADC_A_D.c,63 :: 		
0x0060	0xD7FD      	BRA         L_ADC_Read2
L_ADC_Read3:
;__Lib_ADC_A_D.c,64 :: 		
0x0062	0xF001CFC4  	MOVFF       ADRESH, R1
0x0066	0x6A00      	CLRF        R0 
;__Lib_ADC_A_D.c,65 :: 		
0x0068	0x50C3      	MOVF        ADRESL, 0 
0x006A	0x1200      	IORWF       R0, 1 
0x006C	0x0E00      	MOVLW       0
0x006E	0x1201      	IORWF       R1, 1 
;__Lib_ADC_A_D.c,66 :: 		
0x0070	0x90C2      	BCF         ADCON0, 0 
;__Lib_ADC_A_D.c,68 :: 		
;__Lib_ADC_A_D.c,69 :: 		
L_end_ADC_Read:
0x0072	0x0012      	RETURN      0
; end of _ADC_Read
_ADC_Init:
;__Lib_ADC_A_D.c,13 :: 		
;__Lib_ADC_A_D.c,14 :: 		
0x0074	0x0EFF      	MOVLW       _ADC_Get_Sample
0x0076	0x6E16      	MOVWF       _ADC_Get_Sample_Ptr 
0x0078	0x0EFF      	MOVLW       hi_addr(_ADC_Get_Sample)
0x007A	0x6E17      	MOVWF       _ADC_Get_Sample_Ptr+1 
0x007C	0x0EFF      	MOVLW       FARG_ADC_Get_Sample_channel
0x007E	0x6E18      	MOVWF       _ADC_Get_Sample_Ptr+2 
0x0080	0x0EFF      	MOVLW       hi_addr(FARG_ADC_Get_Sample_channel)
0x0082	0x6E19      	MOVWF       _ADC_Get_Sample_Ptr+3 
;__Lib_ADC_A_D.c,16 :: 		
0x0084	0x6AC2      	CLRF        ADCON0 
;__Lib_ADC_A_D.c,17 :: 		
0x0086	0x1C15      	COMF        _vref_mask, 0 
0x0088	0x6E00      	MOVWF       R0 
0x008A	0x5000      	MOVF        R0, 0 
0x008C	0x16C1      	ANDWF       ADCON1, 1 
;__Lib_ADC_A_D.c,18 :: 		
0x008E	0x0E07      	MOVLW       7
0x0090	0x12C0      	IORWF       ADCON2, 1 
;__Lib_ADC_A_D.c,19 :: 		
0x0092	0x8EC0      	BSF         ADCON2, 7 
;__Lib_ADC_A_D.c,20 :: 		
0x0094	0x80C2      	BSF         ADCON0, 0 
;__Lib_ADC_A_D.c,21 :: 		
L_end_ADC_Init:
0x0096	0x0012      	RETURN      0
; end of _ADC_Init
_main:
0x0098	0xF000EC8C  	CALL        280, 0
;ADCON1.c,33 :: 		void main() {
;ADCON1.c,36 :: 		TRISC = 0x00;
0x009C	0x6A94      	CLRF        TRISC 
;ADCON1.c,37 :: 		TRISD = 0x00;
0x009E	0x6A95      	CLRF        TRISD 
;ADCON1.c,39 :: 		ADCON1 = 12;
0x00A0	0x0E0C      	MOVLW       12
0x00A2	0x6EC1      	MOVWF       ADCON1 
;ADCON1.c,40 :: 		ADC_Init();
0x00A4	0xDFE7      	RCALL       _ADC_Init
;ADCON1.c,43 :: 		while(1){
L_main3:
;ADCON1.c,45 :: 		s1 = ADC_Read(0);
0x00A6	0x6A22      	CLRF        FARG_ADC_Read_channel 
0x00A8	0xDFC6      	RCALL       _ADC_Read
0x00AA	0xF01EC000  	MOVFF       R0, _s1
0x00AE	0xF01FC001  	MOVFF       R1, _s1+1
;ADCON1.c,46 :: 		s2 = ADC_Read(1);
0x00B2	0x0E01      	MOVLW       1
0x00B4	0x6E22      	MOVWF       FARG_ADC_Read_channel 
0x00B6	0xDFBF      	RCALL       _ADC_Read
0x00B8	0xF020C000  	MOVFF       R0, _s2
0x00BC	0xF021C001  	MOVFF       R1, _s2+1
;ADCON1.c,47 :: 		s0 = ADC_Read(2);
0x00C0	0x0E02      	MOVLW       2
0x00C2	0x6E22      	MOVWF       FARG_ADC_Read_channel 
0x00C4	0xDFB8      	RCALL       _ADC_Read
0x00C6	0xF01AC000  	MOVFF       R0, _s0
0x00CA	0xF01BC001  	MOVFF       R1, _s0+1
;ADCON1.c,49 :: 		if(RB0_bit ==0 && RB1_bit ==0){
0x00CE	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x00D0	0xD006      	BRA         L_main7
0x00D2	0xB281      	BTFSC       RB1_bit, BitPos(RB1_bit+0) 
0x00D4	0xD004      	BRA         L_main7
L__main16:
;ADCON1.c,50 :: 		aux =s0;
0x00D6	0xF01CC01A  	MOVFF       _s0, _aux
0x00DA	0xF01DC01B  	MOVFF       _s0+1, _aux+1
;ADCON1.c,51 :: 		}
L_main7:
;ADCON1.c,52 :: 		if(RB0_bit ==1 && RB1_bit ==0){
0x00DE	0xA081      	BTFSS       RB0_bit, BitPos(RB0_bit+0) 
0x00E0	0xD006      	BRA         L_main10
0x00E2	0xB281      	BTFSC       RB1_bit, BitPos(RB1_bit+0) 
0x00E4	0xD004      	BRA         L_main10
L__main15:
;ADCON1.c,53 :: 		aux =s1;
0x00E6	0xF01CC01E  	MOVFF       _s1, _aux
0x00EA	0xF01DC01F  	MOVFF       _s1+1, _aux+1
;ADCON1.c,54 :: 		}
L_main10:
;ADCON1.c,55 :: 		if(RB0_bit ==0 && RB1_bit ==1){
0x00EE	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x00F0	0xD006      	BRA         L_main13
0x00F2	0xA281      	BTFSS       RB1_bit, BitPos(RB1_bit+0) 
0x00F4	0xD004      	BRA         L_main13
L__main14:
;ADCON1.c,56 :: 		aux =s2;
0x00F6	0xF01CC020  	MOVFF       _s2, _aux
0x00FA	0xF01DC021  	MOVFF       _s2+1, _aux+1
;ADCON1.c,57 :: 		}
L_main13:
;ADCON1.c,59 :: 		LATC = aux>>8;
0x00FE	0xF000C01D  	MOVFF       _aux+1, R0
0x0102	0x0E00      	MOVLW       0
0x0104	0xBE1D      	BTFSC       _aux+1, 7 
0x0106	0x0EFF      	MOVLW       255
0x0108	0x6E01      	MOVWF       R1 
0x010A	0xFF8BC000  	MOVFF       R0, LATC
;ADCON1.c,60 :: 		LATD = s1;
0x010E	0xFF8CC01E  	MOVFF       _s1, LATD
;ADCON1.c,62 :: 		}
0x0112	0xD7C9      	BRA         L_main3
;ADCON1.c,64 :: 		}
L_end_main:
0x0114	0xD7FF      	BRA         $+0
; end of _main
0x0118	0xF015EE10  	LFSR        1, 21
0x011C	0x0E01      	MOVLW       1
0x011E	0x6E00      	MOVWF       R0 
0x0120	0x0E01      	MOVLW       1
0x0122	0x6E01      	MOVWF       R1 
0x0124	0x0E16      	MOVLW       22
0x0126	0x6EF6      	MOVWF       4086 
0x0128	0x0E01      	MOVLW       1
0x012A	0x6EF7      	MOVWF       TBLPTRH 
0x012C	0x0E00      	MOVLW       0
0x012E	0x6EF8      	MOVWF       TBLPTRU 
0x0130	0xF000EC13  	CALL        38, 0
0x0134	0x0012      	RETURN      0
;__Lib_ADC_A_D.c,0 :: ?ICS_vref_mask
0x0116	0x30 ;?ICS_vref_mask+0
; end of ?ICS_vref_mask
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [10]    _Delay_22us
0x0026      [16]    ___CC2DW
0x0036      [62]    _ADC_Read
0x0074      [36]    _ADC_Init
0x0098     [126]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _vref_mask
0x0016       [4]    _ADC_Get_Sample_Ptr
0x001A       [2]    _s0
0x001C       [2]    _aux
0x001E       [2]    _s1
0x0020       [2]    _s2
0x0022       [1]    FARG_ADC_Read_channel
0x0F81       [0]    RB0_bit
0x0F81       [0]    RB1_bit
0x0F8B       [1]    LATC
0x0F8C       [1]    LATD
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0116       [1]    ?ICS_vref_mask
