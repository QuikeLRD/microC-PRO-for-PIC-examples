;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 08/08/2024 06:33:57 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF44  	GOTO        136
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_SetDuty:
;PWM_EXAMPLE.c,3 :: 		void SetDuty(int regM){
;PWM_EXAMPLE.c,4 :: 		CCPR1L = regM>>2;                  //Llenamos el registro CCPR1L
0x001C	0xF000C01B  	MOVFF       FARG_SetDuty_regM, R0
0x0020	0xF001C01C  	MOVFF       FARG_SetDuty_regM+1, R1
0x0024	0x3201      	RRCF        R1, 1 
0x0026	0x3200      	RRCF        R0, 1 
0x0028	0x9E01      	BCF         R1, 7 
0x002A	0xBC01      	BTFSC       R1, 6 
0x002C	0x8E01      	BSF         R1, 7 
0x002E	0x3201      	RRCF        R1, 1 
0x0030	0x3200      	RRCF        R0, 1 
0x0032	0x9E01      	BCF         R1, 7 
0x0034	0xBC01      	BTFSC       R1, 6 
0x0036	0x8E01      	BSF         R1, 7 
0x0038	0xFFBEC000  	MOVFF       R0, CCPR1L
;PWM_EXAMPLE.c,5 :: 		DC1B0_bit = regM&0b0000000001;      //Configuramos el DCB0 bit
0x003C	0x0E01      	MOVLW       1
0x003E	0x141B      	ANDWF       FARG_SetDuty_regM, 0 
0x0040	0x6E00      	MOVWF       R0 
0x0042	0xB000      	BTFSC       R0, 0 
0x0044	0xD002      	BRA         L__SetDuty11
0x0046	0x98BD      	BCF         DC1B0_bit, BitPos(DC1B0_bit+0) 
0x0048	0xD001      	BRA         L__SetDuty12
L__SetDuty11:
0x004A	0x88BD      	BSF         DC1B0_bit, BitPos(DC1B0_bit+0) 
L__SetDuty12:
;PWM_EXAMPLE.c,6 :: 		DC1B1_bit = (regM&0b0000000010)>>1; //Configuramos el DCB1 bit
0x004C	0x0E02      	MOVLW       2
0x004E	0x141B      	ANDWF       FARG_SetDuty_regM, 0 
0x0050	0x6E03      	MOVWF       R3 
0x0052	0xF004C01C  	MOVFF       FARG_SetDuty_regM+1, R4
0x0056	0x0E00      	MOVLW       0
0x0058	0x1604      	ANDWF       R4, 1 
0x005A	0xF000C003  	MOVFF       R3, R0
0x005E	0xF001C004  	MOVFF       R4, R1
0x0062	0x3201      	RRCF        R1, 1 
0x0064	0x3200      	RRCF        R0, 1 
0x0066	0x9E01      	BCF         R1, 7 
0x0068	0xBC01      	BTFSC       R1, 6 
0x006A	0x8E01      	BSF         R1, 7 
0x006C	0xB000      	BTFSC       R0, 0 
0x006E	0xD002      	BRA         L__SetDuty13
0x0070	0x9ABD      	BCF         DC1B1_bit, BitPos(DC1B1_bit+0) 
0x0072	0xD001      	BRA         L__SetDuty14
L__SetDuty13:
0x0074	0x8ABD      	BSF         DC1B1_bit, BitPos(DC1B1_bit+0) 
L__SetDuty14:
;PWM_EXAMPLE.c,7 :: 		}
L_end_SetDuty:
0x0076	0x0012      	RETURN      0
; end of _SetDuty
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0078	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x007A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x007E	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0080	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0082	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0084	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0086	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x0088	0x0EC8      	MOVLW       200
0x008A	0x6E15      	MOVWF       _reg 
0x008C	0x6A16      	CLRF        22 
0x008E	0x0E32      	MOVLW       50
0x0090	0x6E17      	MOVWF       _valorPR2 
0x0092	0x6A18      	CLRF        24 
;PWM_EXAMPLE.c,9 :: 		void main() {
;PWM_EXAMPLE.c,10 :: 		ADCON1 = 15;                       //Coloco todos los pines como digitales
0x0094	0x0E0F      	MOVLW       15
0x0096	0x6EC1      	MOVWF       ADCON1 
;PWM_EXAMPLE.c,11 :: 		TRISC2_bit = 0;                    //Configuro como salida el pin RC2
0x0098	0x9494      	BCF         TRISC2_bit, BitPos(TRISC2_bit+0) 
;PWM_EXAMPLE.c,14 :: 		CCP1CON = 0b00001100;              //Configuro en modo PWM
0x009A	0x0E0C      	MOVLW       12
0x009C	0x6EBD      	MOVWF       CCP1CON 
;PWM_EXAMPLE.c,15 :: 		PR2 = valorPR2;
0x009E	0xFFCBC017  	MOVFF       _valorPR2, PR2
;PWM_EXAMPLE.c,17 :: 		SetDuty(reg);                     //Duty Cycle = 100%
0x00A2	0xF01BC015  	MOVFF       _reg, FARG_SetDuty_regM
0x00A6	0xF01CC016  	MOVFF       _reg+1, FARG_SetDuty_regM+1
0x00AA	0xDFB8      	RCALL       _SetDuty
;PWM_EXAMPLE.c,19 :: 		T2CON = 0b00000101;                //Configuramos el timer2 para 4
0x00AC	0x0E05      	MOVLW       5
0x00AE	0x6ECA      	MOVWF       T2CON 
;PWM_EXAMPLE.c,22 :: 		while (1){
L_main0:
;PWM_EXAMPLE.c,24 :: 		for(aux = 0; aux <= 200; aux++){
0x00B0	0x6A19      	CLRF        _aux 
0x00B2	0x6A1A      	CLRF        _aux+1 
L_main2:
0x00B4	0x0E80      	MOVLW       128
0x00B6	0x6E00      	MOVWF       R0 
0x00B8	0x0E80      	MOVLW       128
0x00BA	0x181A      	XORWF       _aux+1, 0 
0x00BC	0x5C00      	SUBWF       R0, 0 
0x00BE	0xE102      	BNZ         L__main16
0x00C0	0x5019      	MOVF        _aux, 0 
0x00C2	0x08C8      	SUBLW       200
L__main16:
0x00C4	0xE311      	BNC         L_main3
;PWM_EXAMPLE.c,25 :: 		SetDuty(aux);
0x00C6	0xF01BC019  	MOVFF       _aux, FARG_SetDuty_regM
0x00CA	0xF01CC01A  	MOVFF       _aux+1, FARG_SetDuty_regM+1
0x00CE	0xDFA6      	RCALL       _SetDuty
;PWM_EXAMPLE.c,26 :: 		delay_ms(50);
0x00D0	0x0E41      	MOVLW       65
0x00D2	0x6E0C      	MOVWF       R12, 0
0x00D4	0x0EEE      	MOVLW       238
0x00D6	0x6E0D      	MOVWF       R13, 0
L_main5:
0x00D8	0x2E0D      	DECFSZ      R13, 1, 0
0x00DA	0xD7FE      	BRA         L_main5
0x00DC	0x2E0C      	DECFSZ      R12, 1, 0
0x00DE	0xD7FC      	BRA         L_main5
0x00E0	0x0000      	NOP
;PWM_EXAMPLE.c,24 :: 		for(aux = 0; aux <= 200; aux++){
0x00E2	0x4A19      	INFSNZ      _aux, 1 
0x00E4	0x2A1A      	INCF        _aux+1, 1 
;PWM_EXAMPLE.c,27 :: 		}
0x00E6	0xD7E6      	BRA         L_main2
L_main3:
;PWM_EXAMPLE.c,28 :: 		for(aux = 200; aux >0; aux--){
0x00E8	0x0EC8      	MOVLW       200
0x00EA	0x6E19      	MOVWF       _aux 
0x00EC	0x0E00      	MOVLW       0
0x00EE	0x6E1A      	MOVWF       _aux+1 
L_main6:
0x00F0	0x0E80      	MOVLW       128
0x00F2	0x6E00      	MOVWF       R0 
0x00F4	0x0E80      	MOVLW       128
0x00F6	0x181A      	XORWF       _aux+1, 0 
0x00F8	0x5C00      	SUBWF       R0, 0 
0x00FA	0xE102      	BNZ         L__main17
0x00FC	0x5019      	MOVF        _aux, 0 
0x00FE	0x0800      	SUBLW       0
L__main17:
0x0100	0xE213      	BC          L_main7
;PWM_EXAMPLE.c,29 :: 		SetDuty(aux);
0x0102	0xF01BC019  	MOVFF       _aux, FARG_SetDuty_regM
0x0106	0xF01CC01A  	MOVFF       _aux+1, FARG_SetDuty_regM+1
0x010A	0xDF88      	RCALL       _SetDuty
;PWM_EXAMPLE.c,30 :: 		delay_ms(50);
0x010C	0x0E41      	MOVLW       65
0x010E	0x6E0C      	MOVWF       R12, 0
0x0110	0x0EEE      	MOVLW       238
0x0112	0x6E0D      	MOVWF       R13, 0
L_main9:
0x0114	0x2E0D      	DECFSZ      R13, 1, 0
0x0116	0xD7FE      	BRA         L_main9
0x0118	0x2E0C      	DECFSZ      R12, 1, 0
0x011A	0xD7FC      	BRA         L_main9
0x011C	0x0000      	NOP
;PWM_EXAMPLE.c,28 :: 		for(aux = 200; aux >0; aux--){
0x011E	0x0E01      	MOVLW       1
0x0120	0x5E19      	SUBWF       _aux, 1 
0x0122	0x0E00      	MOVLW       0
0x0124	0x5A1A      	SUBWFB      _aux+1, 1 
;PWM_EXAMPLE.c,31 :: 		}
0x0126	0xD7E4      	BRA         L_main6
L_main7:
;PWM_EXAMPLE.c,32 :: 		}
0x0128	0xD7C3      	BRA         L_main0
;PWM_EXAMPLE.c,35 :: 		}
L_end_main:
0x012A	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [92]    _SetDuty
0x0078      [16]    ___CC2DW
0x0088     [164]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _reg
0x0017       [2]    _valorPR2
0x0019       [2]    _aux
0x001B       [2]    FARG_SetDuty_regM
0x0F94       [0]    TRISC2_bit
0x0FBD       [0]    DC1B0_bit
0x0FBD       [0]    DC1B1_bit
0x0FBD       [1]    CCP1CON
0x0FBE       [1]    CCPR1L
0x0FC1       [1]    ADCON1
0x0FCA       [1]    T2CON
0x0FCB       [1]    PR2
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
